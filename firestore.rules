rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents {

     function isAuthenticated() {
     	return request.auth.uid != null;
     }

     match /users/{userId} {
        allow create: if isAuthenticated();
        allow read, write: if request.auth.uid == resource.data.id;
     }

     match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.recipient;
     }

     match /tasks/{taskId} {
        function isTaskActive() {
        	return resource.data.isActive == true;
        }

        function isTaskBelongsToMyProjects() {
        	return request.auth.uid in resource.data.taskProject.shareWithIds;
        }

        allow create: if isAuthenticated();
      	allow read: if isTaskActive() && isTaskBelongsToMyProjects();
        allow write: if isTaskActive() && isTaskBelongsToMyProjects();


     }

    match /tags/{tagId} {
    	allow create: if isAuthenticated();
        allow read, write: if request.auth.uid == resource.data.author;
    }

    match /projects/{projectId} {
        function isProjectActive() {
        	return resource.data.isActive == true;
        }

        function canDelete() {
            return request.resource.data.isActive ||
                (request.auth.uid == resource.data.owner && request.resource.data.isActive == false && resource.data.isActive == true);
        }

        function isProjectSharedWithAuthenticatedUser() {
            return request.auth.uid in resource.data.shareWithIds;
        }
      	allow create: if isAuthenticated();
        allow read: if isProjectSharedWithAuthenticatedUser() && isProjectActive() && isAuthenticated();
        allow write: if isProjectSharedWithAuthenticatedUser() && isProjectActive() && isAuthenticated();
        allow update: if canDelete();
    }
  }

}
